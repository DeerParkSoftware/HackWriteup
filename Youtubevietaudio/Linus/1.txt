
Translator: Phuong Quach Reviewer: Michelle Nguyen  Thật là một việc kì lạ.  Phần mềm Linux nằm trong hàng triệu máy tính,  cực kỳ phổ biến trên mạng Internet.  Và tôi nghĩ rằng  có khoảng hơn một tỷ rưỡi thiết bị Android đang hoạt động.  Phần mềm của anh có mặt trong tất cả chúng, từng chiếc một.  Thật đáng ngạc nhiên.  Anh chắc phải sở hữu trụ sở chính chuyên thiết kế phần mềm để làm điều đó.  Đó là điều tôi từng nghĩ, và tôi bị sốc khi thấy bức tranh này.  Ý tôi là, đây là -  đây là trụ sở toàn cầu của Linux.  (Cười)  (Vỗ tay)  Linus Torvalds: Không giống những gì anh tưởng tượng lắm.  Và tôi phải nói,  điểm thú vị nhất trong bức tranh này,  điều hầu như ai cũng để ý tới,  là chiếc bàn biết đi này.  Đây là điều thú vị nhất trong văn phòng của tôi  và thật ra tôi không còn dùng nó nữa.  Và tôi nghĩ có hai thứ liên quan.  Cách tôi làm việc...  Tôi không muốn nhận kích thích từ bên ngoài.  Bạn có thể thấy, trên các bức tường là ánh sáng màu xanh.  Tôi được biết là các viện tâm thần gắn nó trên các bức tường.  (Cười)  Nó tương tự một màu trầm,  đây không phải điều thật sự động viên bạn.  Điều bạn không thể thấy là máy tính ở đây, bạn chỉ có thể thấy màn hình,  nhưng điều tôi lo lắng chủ yếu là chiếc máy tính của mình -  nó không có lớn và không có mạnh, dù tôi thích như vậy -  thật không có gì để bàn.  Tôi biết nhiều người làm việc cho Google  và họ có trung tâm dữ liệu riêng tại nhà mình,  và tôi không làm vậy.  Văn phòng của tôi là nơi chán nhất mà bạn từng gặp.  Và tôi ngồi đây một mình trong yên lặng.  Nếu con mèo chạy ngang,  nó sẽ nhảy lên đùi tôi.  Và tôi muốn nghe tiếng kêu của nó,  không phải âm thanh của chiếc quạt trong máy tính.  Điều này thật là lạ,  vì làm việc theo kiểu này,  anh có thể mở cả một đế quốc công nghệ to lớn -  đây là một đế chế -  nên đó là bằng chứng đáng ngạc nhiên về năng lượng của mã nguồn mở.  Hãy kể chúng tôi nghe cách anh hiểu về mã nguồn mở  và cách nó dẫn tới sự phát triển của Linux.  Ý là tôi vẫn làm việc một mình.  Thật ra - tôi làm việc tại nhà của mình,  tôi thường mặc áo choàng tắm.  Khi một nhà nhiếp ảnh đến, tôi được lên hình,  nên tôi mặc quần áo vào.  (Cười)  Và đó là cách làm việc của tôi.  Đây cũng là cách tôi thành lập Linux.  Tôi không thành lập Linux như một dự án hợp tác.  Tôi bắt đầu là vì nó là một trong chuỗi dự án  có lúc tôi từng làm cho riêng mình,  một phần vì tôi cần kết quả cuối cùng,  mà thậm chí còn vì tôi chỉ thích lập trình.  Cho nên đây là chặng cuối của cuộc hành trình,  mà, 25 năm sau, chúng tôi vẫn chưa đạt được.  Nhưng thật ra là tôi đang tìm một dự án cho riêng mình  và thật ra không hề có mã nguồn mở trên máy ra-đa.  Và điều xảy ra là...  dự án tiến triển và trở thành thứ mà anh muốn khoe với mọi người.  Thật ra, chuyện là "Chà, hãy xem những gì tôi đã làm!"  Tin tôi đi - sau đó chuyện cũng không khá lên là mấy.  Tôi đã công bố cho mọi người,  và lúc đó còn không có mã nguồn mở nữa.  Lúc đó, mã nguồn đã được mở, nhưng không có mục đích  sau khi dùng phương pháp mã nguồn mở mà chúng ta nghĩ ngày nay  để cải thiện nó.  Dường như là,  "Nhìn xem, tôi từng nghiên cứu được nửa năm,  tôi thích xem những lời bình luận."  Và những người khác đã tiếp cận tôi.  Tại trường đại học Helsinki,  tôi có người bạn - một trong những mã nguồn mở -  sau đó nó được gọi là "phần mềm miễn phí" -  và cậu ấy đã giới thiệu cho tôi quan điểm đó, nè,  anh có thể dùng những bản quyền mã nguồn mở xung quanh.  Và tôi từng có suy nghĩ.  Thật ra tôi lo lắng về những lợi ích thương mại tổng thể.  Ý tôi là, đó là một trong những lo lắng tôi nghĩ hầu hết mọi người đều mắc phải,  đó là họ lo ai đó lợi dụng công việc của mình, đúng không?  Và tôi đã quyết định, "Nó là cái quái gì vậy?"  Và -  Và đôi khi,  ai đó đóng góp mật mã mà anh nghĩ,  "Chà, điều đó thật thú vị, tôi sẽ không nghĩ về nó nữa.  Điều này có thể cải thiện được."  Thậm chí nhiều người đóng góp mật mã còn chưa bắt đầu,  hơn nữa những người đó bắt đầu đóng góp ý kiến.  Và thật ra chỉ là ai đó khác nữa chỉ nhìn vào dự án của bạn -  và tôi chắc chắn đây cũng đúng với những điều khác,  nhưng hoàn toàn là thật theo luật -  chính là ai đó khác nữa có hứng thú với mật mã của bạn,  nhìn nó cũng đủ để cho anh đưa phản hồi  và cung cấp ý tưởng cho anh.  Đó là chuyện lớn đối với tôi.  Lúc đó tôi 21 tuổi, nên tôi vẫn còn trẻ,  nhưng cơ bản thì tôi đã lập trình cho nửa đời mình,  Và mỗi dự án trước đó hoàn toàn liên quan cá nhân  và đó là sự phát hiện khi nhiều người vừa mới bắt đầu bình luận.  bắt đầu đưa phản hồi về mật mã của anh.  Và thậm chí trước khi họ bắt đầu trả lại mật mã,  tôi nghĩ đó là một khoảnh khắc tuyệt vời tôi từng kể,  "Tôi yêu mọi người!"  Đừng hiểu lầm tôi -  TôI không phải người vì mọi người.  (Cười)  Tôi thật sự không yêu mọi người -  (Cười)  Nhưng tôi yêu máy tính,  tôi thích tương tác với người khác qua email,  vì nó cung cấp bộ đệm cho bạn.  Nhưng tôi yêu những người đưa ra lời bình và tham gia vào dự án của tôi.  Và còn nhiều hơn thế nữa.  Vậy có lúc nào anh thấy những gì đang được xây dựng  và đột nhiên bị trì hoãn,  và bạn nghĩ, "Chờ một chút, chắc có cái gì đó khổng lồ,  không chỉ là dự án cá nhân mà tôi nhận phản hồi tích cực,  mà còn là một sự phát triển đột ngột trong thế giới công nghệ?  Không hẳn là vậy.  Ý tôi là, điều quan trọng đối với tôi, thật ra, không phải chuyện lớn lao,  mà chỉ là chuyện nhỏ mà thôi.  Điều quan trọng là tôi không có một mình  và có 10, có lẽ 100 người tham gia -  đó mới là điều quan trọng.  Và những chuyện khác thì từng bước từng bước một.  Từ 100 người lên đến 1 triệu người không phải là vấn đề lớn - với tôi.  À, ý tôi là, có lẽ nếu anh là -  (Cười)  Nếu anh muốn bán kết quả thì đó là chuyện lớn đó -  đừng hiểu lầm tôi.  Nhưng nếu anh quan tâm đến công nghệ  và anh có hứng thú với dự án,  chủ yếu là hút sự chú ý của công chúng.  Và cộng đồng sẽ dần dần phát triển.  Và thật ra đây không chỉ là một vấn đề mà tôi đề cập,  "Chà, chỉ là bắt chước thôi!" bởi vì nó -  ý tôi là - gần như phải mất một khoảng thời gian.  Những chuyên gia công nghệ mà tôi đề cập thật sự có uy tín  với việc thay đổi hoàn toàn công việc của họ.  Và đó không phải là Linux,  mà nó có tên gọi là Git,  một hệ thống quản lí dành cho sự phát triển phần mềm.  Hãy kể ngắn gọn với chúng tôi chuyện đó và vai trò của anh.  Vấn đề mà chúng tôi gặp phải,  và điều này mất một lúc mới bắt đầu xuất hiện,  là khi anh...  Khi anh tăng từ 10 người hoặc 100 người làm việc trong một dự án,  lên đến 10 000 người, mà -  ý tôi là, lúc này chúng tôi chỉ tập trung vào nhân của hệ điều hành,  chúng tôi có 1 000 người tham gia trong từng bộ phận.  và diễn ra mỗi 2 tháng, khoảng 2 hay 3 tháng.  Có vài người không làm nhiều như vậy.  Có nhiều người có những sự thay đổi nho nhỏ.  Nhưng để duy trì điều này,  cán cân thay đổi cách anh phải bảo dưỡng nó.  Và chúng tôi đã phải trải qua nhiều đau đớn.  Và có nhiều dự án chỉ tập trung bảo trì mã nguồn mở.  CVS là thứ từng được sử dụng phổ biến nhất,  và tôi cực kì ghét CVS và từ chối chạm vào nó  và thử vài thứ khác mang tính cơ bản và thú vị.  và những người khác cũng ghét.  (Cười)  Và chúng tôi nằm trong tình trạng xấu,  nơi chúng tôi có hàng ngàn người muốn tham gia vào,  nhưng thử nhiều cách khác nhau, tôi lại là người hay ngừng giữa chừng,  nơi tôi không thể cân bằng đến điểm  mà tôi có thể làm việc cùng hàng ngàn người.  Git là dự án lớn thứ hai của tôi,  chỉ được tạo ra để tiếp nối dự án lớn đầu tiên của tôi.  Và đây mới thật sự là cách làm việc của tôi.  Tôi không viết mật mã -  à, tôi viết chỉ vì vui mà thôi -  nhưng tôi muốn giải mã thứ gì đó có ý nghĩa  nên những dự án tôi từng làm là thứ mà tôi cần  và -  Vậy thật ra, cả Linux và Git mới xuất hiện  gần như là hậu quả khó đoán trước được  trong mong muốn không phải làm việc với quá nhiều người.  Hoàn toàn chính xác.  (Cười)  CA: Thật là ngạc nhiên. LT: Uh.  (Vỗ tay)  Tuy nhiên, anh là người đã chuyển giao công nghệ,  không chỉ 1 mà những 2 lần,  và chúng tôi phải cố gắng tìm hiểu nguyên nhân.  Anh từng đưa vài dẫn chứng, nhưng  Đây là ảnh hồi còn nhỏ của anh, với khối vuông rubic.  Anh nói rằng bạn từng lập trình khi anh chỉ mới 10 hay 11 tuổi,  nửa cuộc đời anh.  Anh là thiên tài máy tính, anh biết đó, übernerd,  bạn là ngôi sao trường học có thể làm mọi thứ?  Lúc nhỏ bạn trông thế nào?  À, tôi nghĩ tôi là mọt sách chính hiệu.  Ý tôi là, tôi là...  Và tôi không phải người vì mọi người.  Đó là em trai của tôi.  Thật ra tôi có hứng thú với khối vuông rubic hơn.  hơn em trai tôi.  (Cười)  Em gái tôi, không có trong bức hình này,  khi chúng tôi họp mặt gia đình -  tuy không phải một gia đình lớn nhưng tôi cũng có vài người bà con -  em ấy sẽ giúp tôi chuẩn bị trước.  Trước khi tôi bước vào phòng, em ấy nói,  "Được rồi. Chúng ta tiến hành như vầy như vầy..."  Vì tôi không phải -  tôi là một kẻ nhàm chán.  Tôi đam mê máy tính,  tôi thích Toán,  tôi yêu Vật Lí,  tôi giỏi về các môn đó.  Tôi không nghĩ mình là người đặc biệt gì cả.  Em gái tôi rõ ràng có nói,  ưu điểm đặc biệt nhất của tôi đó là tôi sẽ không từ bỏ.  Được rồi, chúng ta bàn vấn đề này, vì nó rất thú vị.  Anh sẽ không từ bỏ.  Không phải chuyện về sự nhàm chán hay thông minh,  mà là về...sự cố chấp?  Đúng là về sự cố chấp.  Đó là chuyện, như là,  vừa mới bắt đầu  và không có nói rằng, "Được, tôi xong rồi, hãy làm gì đó khác đi -  Nhìn kìa: sáng bóng quá!  Và tôi cũng có chú ý đến nhiều phần khác trong cuộc sống của mình.  Tôi sống trong thung lũng Silicon khoảng 7 năm.  Và tôi cũng làm việc cho công ti tương tự thung lũng Silicon,  suốt một khoảng thời gian.  Tôi chưa nghe chuyện đó.  Chuyện không phải cách hoạt động của thung lũng Silicon.  Điểm tổng thể của thung lũng Silicon đó là những người nhảy việc  rồi đến những người xáo trộn công ti.  Và đó không phải con người của tôi.  Nhưng suốt quá trình phát triển thật sự của Linux,  thỉnh thoảng sự ngoan cố khiến anh phải cãi nhau với những người khác.  Hãy nói một chút về điều đó.  Có cần thiết để duy trì chất lượng của những gì đã được gầy dựng hay không?  Anh sẽ mô tả chuyện đã diễn ra như thế nào?  Tôi không biết điều đó có cần thiết không.  Quay lại với chuyện "Tôi không phải người vì mọi người," -  thỉnh thoảng tôi cũng...  chúng ta có thể nói,  "cận thị" khi diễn ra với cảm giác của những người khác,  và thỉnh thoảng khiến bạn phải thốt lên lời làm tổn thương người khác.  Và tôi không tự hào về điều đó.  (Vỗ tay)  Nhưng, cùng lúc đó, đó là -  tôi hiểu những người " hay nói tôi là người tử tế.  Và khi tôi cố gắng giải thích với họ rằng có lẽ bạn tử tế,  có lẽ bạn nên táo bạo hơn,  họ thấy rằng tôi cũng không hề tử tế.  (Cười)  Điều tôi muốn nói là chúng ta khác biệt nhau.  Tôi không phải người vì mọi người;  không phải điều tôi lấy làm tự hào cho lắm,  nhưng đó là một phần trong tôi.  Và một trong những điều tôi thật sự thích về mã nguồn mở  chính là nó thật sự cho phép mọi người làm việc cùng nhau.  Chúng ta không phải thích nhau -  thỉnh thoảng chúng ta cũng không hề thích nhau.  Thật ra ý tôi là, có rất rất nhiều cuộc tranh luận sôi nổi.  Nhưng thật ra bạn có thể, bạn có thể tìm thấy -  thậm chí bạn không thể đồng ý hay bất đồng,  chỉ là bạn quan tâm nhiều thứ khác nhau.  Và quay lại điều mà tôi đề cập trước đó  tôi lo sợ những người buôn bán lợi dụng công việc của bạn,  hóa ra là, một cách nhanh chóng,  những người buôn bán đó là những người đáng yêu dễ mến.  Và họ đã làm mọi thứ tôi không hề có hứng thú tham gia,  họ có những mục tiêu hoàn toàn khác nhau.  Và họ đã dùng mã nguồn mở theo cách mà tôi không muốn làm chút nào.  Vì đây là mã nguồn mở nên họ có thể làm được,  có thể cùng nhau phối hợp một cách hoàn hảo.  Và tôi cũng nghĩ nó hoạt động tương tự.  Anh cần có quan hệ giữa người với người, những người truyền đạt,  vừa ấm áp vừa thân thiện  những người như là -  (Cười)  thật sự muốn ôm lấy bạn và giúp bạn hòa nhập cộng đồng.  Nhưng không phải ai cũng vậy.  Và đó không phải là tôi.  Tôi quan tâm đến công nghệ.  Có nhiều người quan tâm về UI.  Tôi không thể tạo UI để kiếm sống.  Ý tôi là, nếu tôi bị mắc kẹt trên một hòn đảo  và cách duy nhất để thoát khỏi hòn đảo là tạo một giao diện UI đẹp  tôi sẽ chết tại đây.  (Cười)  Nên có nhiều loại người khác nhau,  và tôi không phải biện hộ mà là cố gắng giải thích.  Điều chúng ta nói trong tuần trước,  anh đã nói về một vài chân dung khác mà anh có,  tôi rất hứng thú với điều đó.  Ý tưởng này là khiếu thẩm mĩ.  Và tôi vừa mới có vài hình ảnh đây.  Tôi nghĩ đây là một ví dụ về khiếu thẩm mĩ không tốt trong mã nguồn,  và cái này có khiểu thẩm mĩ tốt hơn,  cái mà chúng ta có thể lập tức nhìn thấy.  Sự khác biệt giữa hai bức ảnh này là gì?  Và đây là -  Có bao nhiêu người thật sự có mật mã?  Ôi Chúa ơi.  Tôi đảm bảo với anh,  những người giơ tay lên,  họ đã từng tạo ra cái gọi là danh sách liên kết đơn.  Và nó chỉ cho chúng ta -  Trước tiên không phải cách tiếp cận khiếu thẩm mĩ tốt,  đây cơ bản là cách nó tiến hành khi anh bắt đầu giải mã.  Và anh không phải hiểu mật mã này.  Điều thú vị nhất đối với tôi  là phần mệnh đề "Nếu" cuối cùng.  Vì điều diễn ra trong danh sách liên kết đơn -  nó đang cố gỡ bỏ danh mục còn tồn tại trong danh sách -  và có một sự khác biệt giữa liệu đây là danh mục đầu tiên  hay đây là danh mục ở giữa.  Vì nếu đây là danh mục đầu tiên,  bạn phải thay đổi con trỏ tới danh mục đầu tiên.  Nếu là danh mục ở giữa,  bạn phải thay đổi con trỏ đến danh mục trước nó.  Chúng là 2 trường hợp hoàn toàn khác biệt.  Cái đó tốt hơn.  Cái này tốt hơn.  Nó không có mệnh đề "nếu".  Và điều này thật sự không quan trọng -  tôi không muốn anh hiểu tại sao nó không có mệnh đề "nếu",  nhưng anh muốn hiểu  thỉnh thoảng anh có thể gặp một vấn đề theo cách khác  và biên tập lại để tình huống đặc biệt biến mất  rồi trở thành tình huống bình thường.  Và đó là một mật mã tốt.  Nhưng đây là mật mã đơn giản.  Đây là CS 101.  Cái này không quan trọng - mặc dù, chi tiết rất quan trọng.  Đối với tôi, dấu hiệu từ một người mà tôi thật sự muốn hợp tác  chính là họ có khiếu thẩm mĩ tốt, cái mà...  Tôi đã gửi anh một ví dụ ngớ ngẩn  cái đó không liên quan vì nó quá nhỏ.  Khiếu thẩm mĩ tốt lớn hơn nhiều.  Khiếu thẩm mĩ tốt là về cái nhìn những mẫu lớn  và đại loại như tự mình biết cái nào là cách làm đúng.  Được rồi, giờ chúng ta đang ghép các mảnh lại với nhau.  Anh có khiếu thẩm mĩ,  mà có ý nghĩa với những người thiết kế phần mềm.  Anh là chiếc máy tính -  (Cười)  Tôi nghĩ mọi người có mặt ở đây thật ý nghĩa.  Anh là một người giải mã máy tính cực kì thông minh,  và anh cũng cứng đầu kinh khủng.  Nhưng chắc phải có gì đó khác.  Ý tôi, anh sẽ thay đổi tương lai.  Anh chắc là có khả năng thấy trước tương lai.  Anh là người nhìn xa nhỉ?  Thật ra tôi cũng thấy có chút không thoải mái tại TED  trong 2 ngày qua,  vì có nhiều góc nhìn đang diễn ra, đúng không?  Tôi không phải người có tầm nhìn xa.  Tôi không có kế kế hoạch 5 năm.  Tôi là một kĩ sư.  Và tôi nghĩ thật ra -  ý tôi là - tôi hoàn toàn vui vẻ với mọi người  những ai đang đi dạo và nhìn chăm chăm vào đám mây  và nhìn lên những vì sao rồi nói rằng "Tôi muốn đi đến đó."  Nhưng tôi lại nhìn mặt đất,  và tôi muốn vá ổ gà ngay trước mặt tôi  trước khi tôi té vào đó.  Đây chính là con người của tôi.  (Hoan hô)  (Vỗ tay)  Và tuần trước anh đã nói với tôi về 2 chàng trai.  Họ là ai và anh liên hệ với họ bằng cách nào?  À, điều này khá là sáo rỗng trong công nghệ,  cả Tesla hay Edison,  nơi Tesla được xem như nhà khoa học vừa hiểu biết sâu sắc vừa điên rồ.  Và mọi người yêu mến Tesla.  Ý tôi là, có nhiều người đặt tên công ti theo tên ông ấy.  (Cười)  Người khác tôi muốn nói đến đó là Edison,  người được gắn mác xấu đối với khách bộ hành  và là -  ý tôi là, câu nói nổi tiếng của ông là,  "Thiên tài chiếm 1% cảm hứng và 99% cực nhọc."  Tôi nằm trong đội của Edison,  thậm chí nếu mọi người không thích ông.  Vì nếu bạn thật sự so sánh cả hai,  Tesla có sự nắm bắt nhanh nhạy hiện nay,  nhưng ai thật sự làm thay đổi thế giới?  Edison không hẳn là một người tốt đẹp gì,  nhưng ông đã là nhiều việc -  ông có lẽ không phải người trí thức,  nên không có tầm nhìn xa.  Nhưng tôi nghĩ tôi thích Edision hơn Tesla.  Chủ đề tại TED tuần này là những giấc mơ -  ước mơ lớn, táo bạo, dữ dội.  Anh thật sự không thích chuyện đó.  Tôi đang cố bình tĩnh chút đây.  Vậy tốt rồi.  (Cười)  Chúng tôi ủng hộ bạn, ủng hộ bạn.  Nhiều công ti như Google và công ti khác cũng cho rằng  kiếm được hàng tỉ đô la từ phần mềm của anh.  Anh có thấy phiền không?  Không hề.  Không đâu, tôi không buồn lòng vì những lí do đó.  Và một lí do đó là, tôi đang làm tốt.  Tôi thật sự làm rất tốt.  Nhưng lí do khác là -  ý tôi là, không dùng mã nguồn mở và giải phóng mọi thứ,  Linux sẽ không như ngày hôm nay.  Và điều này đem lại những trải nghiệm tôi không thích nói ra chút nào,  nhưng vào lúc đó, đó lại là một trải nghiệm.  Tin tôi đi.  Có nhiều thứ đang diễn ra khiến tôi trở thành một người đàn ông hạnh phúc  và tự nghĩ tôi đã đưa ra những lựa chọn đúng đắn.  Ý tưởng về mã nguồn mở -  tôi nghĩ chúng ta sẽ dừng ở đây -  ý tưởng mã nguồn mở có hoàn toàn được thế giới công nhận,  hay còn nhiều thứ phải xem xét lại,  có nhiều thứ cần phải cân nhắc?  Tôi còn đắn đo một chút.  Tôi nghĩ một nguyên nhân mã nguồn mở hoạt động hiệu quả  chính là vào cuối ngày,  mật mã có xu hướng chuyển sang màu trắng đen.  Cách này thường hiệu quả trong việc đưa ra quyết định,  liệu nó được tiến hành hoàn hảo hay không.  Mật mã có hoạt động tốt hay không,  nghĩa là sẽ có ít cuộc tranh luận về vấn đề này.  Và chúng ta có nhiều cuộc tranh luận dù cho có lí do, đúng không?  Ở nhiều lĩnh vực khác -  ý tôi là, nhiều người bàn về mã nguồn mở và nhiều thứ tương tự vậy -  và thật sự có nhiều lúc rất khó nói  đúng, bạn có thể áp dụng công thức tương tự trong vài lĩnh vực khác.  chỉ vì màu trắng và đen không chỉ chuyển sang màu xám,  mà là những màu sắc khác nhau.  Nên, mã nguồn mở trong khoa học rõ ràng là đang quay trở lại.  Khoa học đã có mặt trước.  Nhưng sau đó khoa học đã đến khá gần,  với những bài báo đắc giá và vài thứ khác đang diễn ra.  Và mã nguồn mở đang quay trở lại ngành khoa học,  với những thứ như arXiv và những tập san công khai.  Wikipedia cũng đã thay đổi cả thế giới.  Còn nhiều ví dụ khác,  tôi chắc chắn có nhiều thứ cần bàn.  Nhưng anh không có tầm nhìn xa,  nên không tùy thuộc anh đặt tên cho chúng.  Không phải vậy.  (Cười)  Tùy các bạn tạo ra chúng thế nào, đúng chứ?  Chính xác.  Linus Torvalds,  cảm ơn Linux, cảm ơn Internet.  cảm ơn các chiếc điện thoại Android.  Cảm ơn đã đến với TED và buổi chia sẻ của bản thân.  Cảm ơn.  (Vỗ tay)  



Chris Anderson: This is such a strange thing.  Your software, Linux, is in millions of computers,  it probably powers much of the Internet.  And I think that there are, like,  a billion and a half active Android devices out there.  Your software is in every single one of them.  It's kind of amazing.  You must have some amazing software headquarters driving all this.  That's what I thought -- and I was shocked when I saw a picture of it.  I mean, this is --  this is the Linux world headquarters.  (Laughter)  (Applause)  Linus Torvalds: It really doesn't look like much.  And I have to say,  the most interesting part in this picture,  that people mostly react to,  is the walking desk.  It is the most interesting part in my office  and I'm not actually using it anymore.  And I think the two things are related.  The way I work is ...  I want to not have external stimulation.  You can kind of see, on the walls are this light green.  I'm told that at mental institutions they use that on the walls.  (Laughter)  It's like a calming color,  it's not something that really stimulates you.  What you can't see is the computer here, you only see the screen,  but the main thing I worry about in my computer is --  it doesn't have to be big and powerful, although I like that --  it really has to be completely silent.  I know people who work for Google  and they have their own small data center at home,  and I don't do that.  My office is the most boring office you'll ever see.  And I sit there alone in the quiet.  If the cat comes up,  it sits in my lap.  And I want to hear the cat purring,  not the sound of the fans in the computer.  CA: So this is astonishing,  because working this way,  you're able to run this vast technology empire --  it is an empire --  so that's an amazing testament to the power of open source.  Tell us how you got to understand open source  and how it lead to the development of Linux.  LT: I mean, I still work alone.  Really -- I work alone in my house,  often in my bathrobe.  When a photographer shows up, I dress up,  so I have clothes on.  (Laughter)  And that's how I've always worked.  I mean, this was how I started Linux, too.  I did not start Linux as a collaborative project.  I started it as one in a series of many projects  I had done at the time for myself,  partly because I needed the end result,  but even more because I just enjoyed programming.  So it was about the end of the journey,  which, 25 years later, we still have not reached.  But it was really about the fact that I was looking for a project on my own  and there was no open source, really, on my radar at all.  And what happened is ...  the project grows and becomes something you want to show off to people.  Really, this is more of a, "Wow, look at what I did!"  And trust me -- it was not that great back then.  I made it publicly available,  and it wasn't even open source at that point.  At that point it was source that was open, but there was no intention  behind using the kind of open-source methodology that we think of today  to improve it.  It was more like,  "Look, I've been working on this for half a year,  I'd love to have comments."  And other people approached me.  At the University of Helsinki,  I had a friend who was one of the open source --  it was called mainly "free software" back then --  and he actually introduced me to the notion that, hey,  you can use these open-source licenses that had been around.  And I thought about it for a while.  I was actually worried about the whole commercial interests coming in.  I mean, that's one of the worries I think most people who start out have,  is that they worry about somebody taking advantage of their work, right?  And I decided, "What the hell?"  And --  CA: And then at some point,  someone contributed some code that you thought,  "Wow, that really is interesting, I would not have thought of that.  This could actually improve this."  LT: It didn't even start by people contributing code,  it was more that people started contributing ideas.  And just the fact that somebody else takes a look at your project --  and I'm sure it's true of other things, too,  but it's definitely true in code --  is that somebody else takes an interest in your code,  looks at it enough to actually give you feedback  and give you ideas.  That was a huge thing for me.  I was 21 at the time, so I was young,  but I had already programmed for half my life, basically.  And every project before that had been completely personal  and it was a revelation when people just started commenting,  started giving feedback on your code.  And even before they started giving code back,  that was, I think, one of the big moments where I said,  "I love other people!"  Don't get me wrong --  I'm actually not a people person.  (Laughter)  I don't really love other people --  (Laughter)  But I love computers,  I love interacting with other people on email,  because it kind of gives you that buffer.  But I do love other people who comment and get involved in my project.  And it made it so much more.  CA: So was there a moment when you saw what was being built  and it suddenly started taking off,  and you thought, "Wait a sec, this actually could be something huge,  not just a personal project that I'm getting nice feedback on,  but a kind of explosive development in the whole technology world"?  LT: Not really.  I mean, the big point for me, really, was not when it was becoming huge,  it was when it was becoming little.  The big point for me was not being alone  and having 10, maybe 100 people being involved --  that was a big point.  Then everything else was very gradual.  Going from 100 people to a million people is not a big deal -- to me.  Well, I mean, maybe it is if you're --  (Laughter)  If you want to sell your result then it's a huge deal --  don't get me wrong.  But if you're interested in the technology  and you're interested in the project,  the big part was getting the community.  Then the community grew gradually.  And there's actually not a single point where I went like,  "Wow, that just took off!" because it --  I mean -- it took a long time, relatively.  CA: So all the technologists that I talk to really credit you  with massively changing their work.  And it's not just Linux,  it's this thing called Git,  which is this management system for software development.  Tell us briefly about that and your role in that.  LT: So one of the issues we had,  and this took a while to start to appear,  is when you ...  When you grow from having 10 people or 100 people working on a project  to having 10,000 people, which --  I mean, right now we're in the situation where just on the kernel,  we have 1,000 people involved in every single release  and that's every two months, roughly two or three months.  Some of those people don't do a lot.  There's a lot of people who make small, small changes.  But to maintain this,  the scale changes how you have to maintain it.  And we went through a lot of pain.  And there are whole projects that do only source-code maintenance.  CVS is the one that used to be the most commonly used,  and I hated CVS with a passion and refused to touch it  and tried something else that was radical and interesting  and everybody else hated.  CA: (Laughs)  LT: And we were in this bad spot,  where we had thousands of people who wanted to participate,  but in many ways, I was the kind of break point,  where I could not scale to the point  where I could work with thousands of people.  So Git is my second big project,  which was only created for me to maintain my first big project.  And this is literally how I work.  I don't code for --  well, I do code for fun --  but I want to code for something meaningful  so every single project I've ever done has been something I needed  and --  CA: So really, both Linux and Git kind of arose  almost as an unintended consequence  of your desire not to have to work with too many people.  LT: Absolutely. Yes.  (Laughter)  CA: That's amazing. LT: Yeah.  (Applause)  And yet, you're the man who's transformed technology  not just once but twice,  and we have to try and understand why it is.  You've given us some clues, but ...  Here's a picture of you as a kid, with a Rubik's Cube.  You mentioned that you've been programming since you were like 10 or 11,  half your life.  Were you this sort of computer genius, you know, übernerd,  were you the star at school who could do everything?  What were you like as a kid?  LT: Yeah, I think I was the prototypical nerd.  I mean, I was ...  I was not a people person back then.  That's my younger brother.  I was clearly more interested in the Rubik's Cube  than my younger brother.  (Laughter)  My younger sister, who's not in the picture,  when we had family meetings --  and it's not a huge family, but I have, like, a couple of cousins --  she would prep me beforehand.  Like, before I stepped into the room she would say,  "OK. That's so-and-so ..."  Because I was not --  I was a geek.  I was into computers,  I was into math,  I was into physics.  I was good at that.  I don't think I was particularly exceptional.  Apparently, my sister said  that my biggest exceptional quality was that I would not let go.  CA: OK, so let's go there, because that's interesting.  You would not let go.  So that's not about being a geek and being smart,  that's about being ... stubborn?  LT: That's about being stubborn.  That's about, like,  just starting something  and not saying, "OK, I'm done, let's do something else --  Look: shiny!"  And I notice that in many other parts in my life, too.  I lived in Silicon Valley for seven years.  And I worked for the same company, in Silicon Valley,  for the whole time.  That is unheard of.  That's not how Silicon Valley works.  The whole point of Silicon Valley is that people jump between jobs  to kind of mix up the pot.  And that's not the kind of person I am.  CA: But during the actual development of Linux itself,  that stubbornness sometimes brought you in conflict with other people.  Talk about that a bit.  Was that essential to sort of maintain the quality of what was being built?  How would you describe what happened?  LT: I don't know if it's essential.  Going back to the "I'm not a people person," --  sometimes I'm also ...  shall we say,  "myopic" when it comes to other people's feelings,  and that sometimes makes you say things that hurt other people.  And I'm not proud of that.  (Applause)  But, at the same time, it's --  I get people who tell me that I should be nice.  And then when I try to explain to them that maybe you're nice,  maybe you should be more aggressive,  they see that as me being not nice.  (Laughter)  What I'm trying to say is we are different.  I'm not a people person;  it's not something I'm particularly proud of,  but it's part of me.  And one of the things I really like about open source  is it really allows different people to work together.  We don't have to like each other --  and sometimes we really don't like each other.  Really -- I mean, there are very, very heated arguments.  But you can, actually, you can find things that --  you don't even agree to disagree,  it's just that you're interested in really different things.  And coming back to the point where I said earlier  that I was afraid of commercial people taking advantage of your work,  it turned out, and very quickly turned out,  that those commercial people were lovely, lovely people.  And they did all the things that I was not at all interested in doing,  and they had completely different goals.  And they used open source in ways that I just did not want to go.  But because it was open source they could do it,  and it actually works really beautifully together.  And I actually think it works the same way.  You need to have the people-people, the communicators,  the warm and friendly people  who like --  (Laughter)  really want to hug you and get you into the community.  But that's not everybody.  And that's not me.  I care about the technology.  There are people who care about the UI.  I can't do UI to save my life.  I mean, if I was stranded on an island  and the only way to get off that island was the make a pretty UI,  I'd die there.  (Laughter)  So there's different kinds of people,  and I'm not making excuses, I'm trying to explain.  CA: Now, when we talked last week,  you talked about some other trait that you have,  which I found really interesting.  It's this idea called taste.  And I've just got a couple of images here.  I think this is an example of not particularly good taste in code,  and this one is better taste,  which one can immediately see.  What is the difference between these two?  LT: So this is --  How many people here actually have coded?  CA: Oh my goodness.  LT: So I guarantee you,  everybody who raised their hand,  they have done what's called a singly-linked list.  And it's taught --  This, the first not very good taste approach,  is basically how it's taught to be done when you start out coding.  And you don't have to understand the code.  The most interesting part to me  is the last if statement.  Because what happens in a singly-linked list --  this is trying to remove an existing entry from a list --  and there's a difference between if it's the first entry  or whether it's an entry in the middle.  Because if it's the first entry,  you have to change the pointer to the first entry.  If it's in the middle,  you have to change the pointer of a previous entry.  So they're two completely different cases.  CA: And that's better.  LT: And this is better.  It does not have the if statement.  And it doesn't really matter --  I don't want you understand why it doesn't have the if statement,  but I want you to understand  that sometimes you can see a problem in a different way  and rewrite it so that a special case goes away  and becomes the normal case.  And that's good code.  But this is simple code.  This is CS 101.  This is not important -- although, details are important.  To me, the sign of people I really want to work with  is that they have good taste, which is how ...  I sent you this stupid example  that is not relevant because it's too small.  Good taste is much bigger than this.  Good taste is about really seeing the big patterns  and kind of instinctively knowing what's the right way to do things.  CA: OK, so we're putting the pieces together here now.  You have taste,  in a way that's meaningful to software people.  You're --  (Laughter)  LT: I think it was meaningful to some people here.  CA: You're a very smart computer coder,  and you're hellish stubborn.  But there must be something else.  I mean, you've changed the future.  You must have the ability of these grand visions of the future.  You're a visionary, right?  LT: I've actually felt slightly uncomfortable at TED  for the last two days,  because there's a lot of vision going on, right?  And I am not a visionary.  I do not have a five-year plan.  I'm an engineer.  And I think it's really --  I mean -- I'm perfectly happy with all the people  who are walking around and just staring at the clouds  and looking at the stars and saying, "I want to go there."  But I'm looking at the ground,  and I want to fix the pothole that's right in front of me  before I fall in.  This is the kind of person I am.  (Cheers)  (Applause)  CA: So you spoke to me last week about these two guys.  Who are they and how do you relate to them?  LT: Well, so this is kind of cliché in technology,  the whole Tesla versus Edison,  where Tesla is seen as the visionary scientist and crazy idea man.  And people love Tesla.  I mean, there are people who name their companies after him.  (Laughter)  The other person there is Edison,  who is actually often vilified for being kind of pedestrian  and is --  I mean, his most famous quote is,  "Genius is one percent inspiration and 99 percent perspiration."  And I'm in the Edison camp,  even if people don't always like him.  Because if you actually compare the two,  Tesla has kind of this mind grab these days,  but who actually changed the world?  Edison may not have been a nice person,  he did a lot of things --  he was maybe not so intellectual,  not so visionary.  But I think I'm more of an Edison than a Tesla.  CA: So our theme at TED this week is dreams --  big, bold, audacious dreams.  You're really the antidote to that.  LT: I'm trying to dial it down a bit, yes.  CA: That's good.  (Laughter)  We embrace you, we embrace you.  Companies like Google and many others have made, arguably,  like, billions of dollars out of your software.  Does that piss you off?  LT: No.  No, it doesn't piss me off for several reasons.  And one of them is, I'm doing fine.  I'm really doing fine.  But the other reason is --  I mean, without doing the whole open source and really letting go thing,  Linux would never have been what it is.  And it's brought experiences I don't really enjoy, public talking,  but at the same time, this is an experience.  Trust me.  So there's a lot of things going on that make me a very happy man  and thinking I did the right choices.  CA: Is the open source idea --  this is, I think we'll end here --  is the open source idea fully realized now in the world,  or is there more that it could go,  are there more things that it could do?  LT: So, I'm of two minds there.  I think one reason open source works so well in code  is that at the end of the day,  code tends to be somewhat black and white.  There's often a fairly good way to decide,  this is done correctly and this is not done well.  Code either works or it doesn't,  which means that there's less room for arguments.  And we have arguments despite this, right?  In many other areas --  I mean, people have talked about open politics and things like that --  and it's really hard sometimes to say  that, yes, you can apply the same principles in some other areas  just because the black and white turns into not just gray,  but different colors.  So, obviously open source in science is making a comeback.  Science was there first.  But then science ended up being pretty closed,  with very expensive journals and some of that going on.  And open source is making a comeback in science,  with things like arXiv and open journals.  Wikipedia changed the world, too.  So there are other examples,  I'm sure there are more to come.  CA: But you're not a visionary,  and so it's not up to you to name them.  LT: No.  (Laughter)  It's up to you guys to make them, right?  CA: Exactly.  Linus Torvalds,  thank you for Linux, thank you for the Internet,  thank you for all those Android phones.  Thank you for coming here to TED and revealing so much of yourself.  LT: Thank you.  (Applause)  



翻译人员: Hong Li 校对人员: Amy H. Fann  克里斯•安德森：有件事情很奇怪。  你的软件，Linux， 运行于数百万计算机中，  可以说是它驱动了网络。  我想，全世界正在使用  将近15亿台的安卓设备。  每一台里都有你的软件。  这非常了不起。  你肯定有一个特别高大上的 总部来实现这一切。  我以前真这么想—— 直到我看到这张照片，我被震惊了。  真的惊了——  这就是Linux的总部。  （笑声）  （掌声）  林纳斯•托瓦兹：好吧，让大家失望了。  我不得不说，  这张照片里最有意思的地方，  被最多人问起的地方，  就是那张会动的办公桌。  这是我办公室最有趣的部分  虽然我现在不怎么用它了。  我觉得两者是有联系的。  我的工作方式……  我不想要有太多的外来刺激。  大家能看到，我的墙是淡绿色的。  据说精神病医院的墙就是这种颜色。  （笑声）  这种颜色能让你平静，  不会刺激到你。  其实大家看不到我的电脑（主机）， 只能看到显示器，  我对电脑最主要的要求——  并不是性能强劲，尽管我也爱——  就是它必须没有任何声音。  我认识一些在谷歌工作的人，  他们在家里都有小型数据中心，  我可没这习惯。  我的办公室也许是你见过最无聊的一个。  我喜欢独自一人，享受安静。  如果有猫进来，  它会坐在我大腿上。  我喜欢听猫打呼噜，  而不是听特烦的电脑风扇的声音。  CA：太了不起了，  你的这种工作方式，  才能让你运行如此庞大的一个技术帝国——  确实是一个帝国——  这是开源（软件）强大力量的一个最好例证。  请告诉我们你是如何理解开源的，  和它又是如何一步一步发展成Linux的。  LT：我现在还是独自工作。  真的，我独自一人在家工作，  经常穿着浴袍干活。  当一个摄影师来的时候，我才会穿戴整齐，  所以（这张照片里）我是穿着衣服的。  （笑声）  我一直以来就是这样工作的。  Linux也是这样诞生的。  Linux并不是一个合作的产物。  它是我一系列项目中的一个，  纯粹出于自己当时的需要，  部分原因是我需要得到结果，  但更重要的原因是我享受编程。  这段旅程的终点，  在25年后的今天，我们仍未达到。  当年我只是想做一个 完全属于自己的项目，  我压根就没想过开源这件事。  但在那之后，  随着项目越来越大， 你会开始想让别人知道。  感觉就像“哇，快来看看我的成果！”  但说实话，最开始并没这么好。  我把它放到网上供人下载，  当时甚至还不是开源的。  当然，所有代码都是开放的， 但我并没有想过  要用我们今天所熟知的开源方法  来改进它。  我当时想的是，  “看，这是我折腾了半年的成果，  我想听听大家的意见。”  有人来找过我。  在赫尔辛基大学，  我有个朋友是做开源软件的——  当年还叫“免费软件”——  他让我了解到，“嘿，  你可以用那些已有的开源许可证。”  我考虑了一段时间。  我其实有点担心商业利益牵涉其中。  我想，很多人一开始会跟我一样，  担心自己的工作成果会被人利用，不是吗？  于是我决定，“不管了。”  然后……  CA：然后某一天，  一些人对你的代码提出了些建议，你觉得  “哇哦，真是不错， 我都没想到这一点。  对改进软件很有帮助。”  LT：其实最开始没有多少人直接改代码，  而是提出了很多想法。  让别人看一下你所做的项目——  我想在其他行业也是这样——  但在编程的时候就更是如此——  有人对你的代码感兴趣，  仔细研究过，能给你反馈，  给你建议。  对我而言是非常重要的一件事。  当时我21岁，还很年轻，  但在那之前，我人生的一半时间都在敲代码。  之前的每一个项目， 我都是独自完成的，  有人开始评论我的代码，  给予反馈，真是头一遭。  他们甚至还没开始改代码，  但对我来讲已经足以载入史册， 因为我觉得，  “我爱世人！”  别误会我，  其实我并不合群。  （笑声）  我并不爱世人。  （笑声）  我爱电脑，  我喜欢通过发邮件互动，  因为这样能给你缓冲。  但我真正喜欢的是 人们给出评论，参与我的项目。  这样能让我的项目快速成长。  CA：有没有那样一个时间点， 你发现自己一直在做的项目  突然开始成型了，  你对自己说， “等一下，这事儿也许能做成，  不单单是一个我能得到良好反馈的个人项目，  而是能在整个科技界掀起轩然大波的大事”？  LT：还真没有。  对我而言，最重要的时刻 并不是它变大的那一天，  恰恰是在它还不够大的时候。  对我而言，当我不再独自工作，  有10个人，或者100个人加入进来——  这才是一种突破。  之后事情就顺其自然了。  对我来说，从100人到100万人， 并不是那么重要。  其实我的意思是，如果你……  （笑声）  如果你是想把自己的成果卖掉， 那确实就很重要——  别误解我的意思。  如果你感兴趣的是科技本身，  是这个项目本身，  那么最重要的就是找到志趣相投的人。  之后这个群体会自发壮大。  并没有一个特别明显的时间点，我会觉得  “哇哦，这事儿快成了！”因为——  这个时间非常漫长。  CA：所有我采访的技术专家们 都对你赞不绝口，  说你极大改进了他们的工作。  不光是Linux，  还有Git，  是一种软件开发管理系统。  简单介绍一下它以及你在其中扮演的角色。  LT：我们遇到的问题之一，  （在项目开始后）一段时间后才开始显现，  就是当你……  从10个或者100个人参与一个项目，  增长到1万人的时候，而这——  关于（Linux）内核，我们碰到的问题是，  每次更新都有1000人参与，  而更新频率是每两、三个月一次。  这其中有些人作用不大。  有很多人能做出小小的改进。  但要进行维护，  所需要的工作量就会大大增加。  我们吃尽了苦头。  有时候甚至整个程序 都仅仅是为了对源代码进行维护。  CVS曾经是最流行的，  我恨透了它，连碰都不想碰，  我喜欢更基础、更有趣的方法，  但其他人又不喜欢。  CA：（笑声）  LT：我们陷入了僵局，  成千上万的人想参与进来，  但很多时候，我成为了那个断点，  我无法让自己跨出那一步，  同上千人合作。  因此Git是我的第二个大项目，  它存在的意义就是维护我的第一个大项目。  事实上这就是我的工作方式。  我编程并不是为了……  我编程是因为好玩，  但我也想做一些有意义的事情，  因此我设计每一个程序 仅仅是因为我自己需要  而且……  CA：因此，实际上，Linux和Git的出现，  都是意外的收获，  仅仅因为你不想跟太多人一起工作。  LT：千真万确。没错。  （笑声）  CA：太牛了。 LT：可不是吗。  （掌声）  你带来了技术革新，  不是一次，而是两次，  我们试图去探寻背后的原因。  你给了我们一些线索，但是……  这是一张你小时候的照片， 你手里拿着魔方。  你刚才提到，你从10岁、 11岁就开始编程了，  人生的一半，  你是那种电脑天才，技术宅吗？  你在学校里是无所不能的明星吗？  你是个什么样的孩子？  LT：没错，我觉得自己就是宅男的原型。  我是说，当年……  我并不喜欢跟人打交道。  那是我弟弟。  显然我对魔方更有兴趣，  完全无视我弟弟。  （笑声）  我还有个妹妹，她不在照片里，  当我们全家聚在一起的时候——  我家人不算多，但我有好几个侄子侄女——  她会事先给我打预防针。  在我进屋之前，她会说，  “好的，你要注意什么什么……”  因为我其实……  我是个技术宅。  我喜欢电脑，  喜欢数学，  喜欢物理。  我擅长这些。  但也没到出类拔萃的地步。  就像我妹妹说的，  我最突出的品质就是不放弃。  CA：好的，那我们就来聊聊这个， 这很有意思。  你不轻言放弃。  也就是说，不是因为技术宅或者聪明，  而是因为……固执？  LT：没错，就是固执。  就像，  我开始做一件事情，  我不会说，“好的，我不干了， 我要去干点别的……  看，比如那个！”  我发现我在做其他事情的时候也会这样。  我在硅谷生活了7年。  一直在同一家公司上班， 那可是在硅谷哦，  从未换过。  这简直闻所未闻。  尤其在硅谷这个地方。  硅谷最大的特点就是，人们总在跳槽，  一会这一会那。  而我不是这样。  CA：但在Linux系统发展的过程中，  这种固执有时会让你和别人产生冲突。  给我们讲讲这个。  维持已有成果的质量是不是非常必要？  你会如何来形容之后发生的事情？  LT：我不确定这是不是非常必要。  还是说回到“我并不合群”这一点，  有的时候我还……  可以说，  不太理解他人的感受，  经常会说话伤到别人。  对此我感到很抱歉。  （掌声）  但与此同时，  有人告诉我，我应该友善一些。  然后我会跟他们说，可能你是友善，  但你应该更加富有侵略性一些，  他们会把这个当成我的不友善。  （笑声）  我想说的是我们是不同的。  我不是个合群的人，  对此我并不感到骄傲，  但这就是我。  而我喜欢开源软件的一点就是，  它能让形形色色的人在一起合作。  我们不必相互喜欢——  有时候我们甚至互相讨厌。  是真的，我们经常吵得不可开交。  但是你会，你会发现许多事情——  甚至都没法同意保留不同意见，  因为大家的兴趣点真的不一样。  回到我刚才说过的，  我担心商人们利用我们的劳动成果，  但没过多久，我发现，  这些商人都是非常非常好的人。  他们做那些我不感兴趣的事，  关注点与我完全不同。  他们使用开源软件的方法跟我不一样的。  但正因为是开源的，他们可以这么干，  而且实际上效果很好。  我甚至认为跟我使用的效果一样好。  我们需要合群的人，需要能与人交流的人，  需要温暖友好的人  就像……  （笑声）  喜欢拥抱你，带你走进这个圈子。  但不是每个人都能做到。  比如我就做不到。  我关注的是技术。  有的人关注用户界面。  我死也做不来用户界面。  举个例子，如果我被困在一个孤岛上，  逃出生天的唯一办法 是设计一个漂亮的用户界面，  我宁愿死在岛上。  （笑声）  人跟人是不一样的，  我并不是在找借口， 只是想解释给大家听。  CA：我们上周见面的时候，  你聊到自己的一些其他特点，  我觉得很有意思。  是关于品味的。  我这里有一些图片。  我觉得这一段代码就没什么品位，  而这一段要好一些，  相信大家一看便知。  这两段代码有什么不一样？  LT：这是……  在座的有哪些人编过程？  CA：我的天啊。  LT：我敢保证，  刚刚举手的每一位，  肯定做过单向链表。  它是在……  这个，第一段不怎么漂亮的代码，  基本上是在你刚开始学编程的时候学到的。  你不需要真的理解这段代码。  我觉得最有意思的  是最后一个“if”语句。  因为在单向链表中——  这里是试图将一个已存在的入口移出链表——  不同之处在于这是第一个入口  还是一个位于中间的入口。  如果是第一个入口，  你需要将指针改向第一个入口。  而如果位于中间，  你需要将指针改向上一个入口。  这是两种完全不同的情况。  CA：这一个比较好。  LT：这一个比较好。  它没有if语句。  这完全不影响——  你不必了解这里为什么没有“if”语句，  你需要了解的是  有时候你可以换个角度看问题，  重写代码，排除特例，  完美覆盖所有情况。  这就是好的代码。  同时也很简单。  这是最基本的原则。  其实这都不重要—— 当然，细节非常重要。  对我来说，我愿意与之共事的人，  必须有好的品位，这就是如何……  我举的这个例子很傻，  没什么意义，因为实在太短。  好的品位体现在更长的代码里。  好的品位体现在能看清全局  甚至有一种直觉， 知道怎么把事情做漂亮。  CA：好的，让我们来总结一下。  你有品位，  当然是对于程序员们而言，  你很有品位——  （笑声）  LT：对在座有些人而言，是这样。  CA：你是个非常有才华的电脑程序员，  你异常固执。  但肯定不止这些。  因为你是改变了未来的人。  你一定有实现未来宏伟愿景的能力。  你是个有远见的人，是吗？  LT：其实在过去两天里，我在TED大会  觉得不太自在 ，  因为有很多关于未来的想象，对吧？  我并不是一个有远见的人。  我没有制定未来五年的计划。  我是一名工程师。  而且我觉得，真是——  我是说——我非常乐意跟梦想家在一起  他们行走四方，仰望苍穹，  看着满天星辰说，“我想到那儿去。”  但我是低头看路的那种人，  我只想填好眼前这个坑，  不让自己掉进去。  我是这样的人。  （欢呼）  （掌声）  CA：上周你跟我聊过他们俩。  他们是谁？你跟他们有什么关系？  LT：这其实是技术界的一个老故事了，  特斯拉和爱迪生之争，  特斯拉被认为是一名有远见的科学家， 总是有疯狂的想法。  大家都爱特斯拉。  你看，还有人把自己公司也叫这个名字。  （笑声）  另一个人是爱迪生，  经常被嘲讽说他是一个单调乏味的人，  而且——  他最有名的一句话就是，  “天才是1%的灵感加上99%的汗水。”  而我是爱迪生一派的，  尽管人们经常讨厌他。  如果你比较一下这两位，  特斯拉很能抓眼球，  但真正改变世界的是谁？  爱迪生也许不是个讨喜的人，  但他做了很多事——  他也许没那么天才，  不是那么有远见。  我觉得自己更像爱迪生而不是特斯拉。  CA：TED大会这一周的主题是梦想——  宏伟、大胆的梦想。  而你却像碎梦人。  LT：我会试着收敛一些。  CA：太好了。  （笑声）  我们接受你，我们爱你。  谷歌和其他许多公司 使用你的软件，  挣了非常多的钱。  你会觉得不爽吗？  LT：不会。  原因有很多，  其中一个原因是，我过得不错。  真心不错。  另一个原因就是——  如果我不将它开源，而过于纠结的话，  Linux就不会发展成今天这样。  而且Linux让我有了许多经历， 尽管我不喜欢，比如在公开场合讲话，  但同时，这也是一种历练。  相信我。  很多事情让我成为了一个快乐的人，  我觉得当初的选择没有错。  CA：开源软件这个想法——  我想这是最后一个话题——  开源软件这个想法已经在全世界实现了吗？  还是说还有潜力可挖，  还有很多可以做的？  LT：我有两个想法。  我认为开源软件如此成功的原因之一  在于归根结底，  代码是一个非黑即白的事情。  我们有非常明确的方法来分辨，  一段代码是行还是不行。  代码要么运行成功，要么失败，  这就意味着没什么可争议的。  我们有很多争议，不是吗？  在其他许多领域——  人们探讨过公开政治和其他类似的事情——  有时候真的很难去说，  没错，你可以在其他领域也采取同样的原则，  因为在那些地方不是非黑即白的，有灰色，  也有其他颜色。  因此，科学界的开源显然是一种回归。  科学最初是开源的。  但之后变得越来越封闭，  只存在那些昂贵的科学期刊上。  开源让科学回归了，  我们有了arXiv和开放期刊。  维基百科也改变了世界。  还有其他许多例子，  我觉得未来还会有更多。  CA：但你不是个有远见的人，  这些事跟你没啥关系。  LT：当然。  （笑声）  得靠你们去实现了，对吗？  CA：没错。  林纳斯·托瓦兹，  谢谢你的Linux，谢谢你为互联网做的一切，  谢谢你为安卓手机做的一切。  谢谢你来参加TED大会， 让我们更加了解你。  LT：谢谢。  （掌声）  